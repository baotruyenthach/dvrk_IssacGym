Assets
#######

Loading Assets
===============

Gym currently supports loading URDF, MJCF, and USD file formats.  Loading an asset file creates a ``GymAsset`` object that includes the definiton of all the bodies, collision shapes, visual attachments, joints, and degrees of freedom (DOFs).  Soft bodies and particles are also supported with some formats.

When loading an asset, you specify the asset root directory and the asset path relative to the root.  This split is necessary because the importers sometimes need to search for external reference files like meshes or materials within the asset directory tree. The asset root directory can be specified as an absolute path or as a path relative to the current working directory.  In our Python examples, we load assets like this::

    asset_root = "../../assets"
    asset_file = "urdf/franka_description/robots/franka_panda.urdf"
    asset = gym.load_asset(sim, asset_root, asset_file)

The ``load_asset`` method uses the file name extension to determine the asset file format.  Supported extensions include **.urdf** for URDF files, **.xml** for MJCF files, and **.usd**/**.usda** for USD files.  The Gym API also has format-specific methods that eliminate the guesswork, called ``load_asset_urdf``, ``load_asset_mjcf``, and ``load_asset_usd``.

Sometimes, you may wish to pass extra information to the asset importer.  This is accomplished by specifying an optional ``AssetOptions`` parameter::

    asset_options = gymapi.AssetOptions()
    asset_options.fix_base_link = True
    asset_options.armature = 0.01

    asset = gym.load_asset(sim, asset_root, asset_file, asset_options)

Procedural Assets
==================

Simple geometric assets like boxes, capsules, and spheres can be created procedurally::

	asset_options = gym.AssetOptions()
	asset_options.density = 10.0

	box_asset = gym.create_box(sim, width, height, depth, asset_options)
	sphere_asset = gym.create_sphere(sim, radius, asset_options)
	capsule_asset = gym.create_capsule(sim, radius, length, asset_options)

Asset Options
==============

See :py:class:`isaacgym.gymapi.AssetOptions`.

Asset Introspection
====================

You can inspect the collections of components in each asset, including rigid bodies, joints, and DOFs.  See ``examples/asset_info.py`` for sample usage.

Creating Actors
================

Loading or creating an asset does not automatically add it to the simulation.  A ``GymAsset`` serves as a blueprint for actors and can be instanced multiple times in a simulation with different poses and individualized properties, as described in the section on :ref:`Environments and Actors <envs_and_actors>`.

Limitations
============

The asset pipeline is a work in progress, so there are some limitations.

- The URDF importer can only load meshes in OBJ format.  Many URDF models come with STL collision meshes and DAE visual meshes, but those need to be manually converted to OBJ for the current importer.
- The MJCF importer supports primitive shapes only, such as boxes, capsules, and spheres.  Mesh loading is currently not available in that importer.
- The MJCF importer supports multiple joints between a pair of bodies, which is useful to define independently named and controllable degrees of freedom.  This is used in the ``humanoid_20_5.xml`` model to define independent motion limits for shoulders, hips, and other compound joints.

Relevant Examples
==================

Take a look at the Python examples ``asset_info.py`` and ``joint_monkey.py`` for working with assets.
